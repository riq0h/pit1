#!/usr/bin/env ruby
require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args, exception: true)
end

def print_header(message)
  puts "========================================"
  puts "#{message}"
  puts "========================================"
end

def print_success(message)
  puts "✓ #{message}"
end

def print_warning(message)
  puts "⚠️ #{message}"
end

def print_error(message)
  puts "❌ #{message}"
end

def print_info(message)
  puts "ℹ️ #{message}"
end

FileUtils.chdir APP_ROOT do
  puts ""
  puts " ██╗      ███████╗ ████████╗ ████████╗ ███████╗ ██████╗"
  puts " ██║      ██╔════╝ ╚══██╔══╝ ╚══██╔══╝ ██╔════╝ ██╔══██╗"
  puts " ██║      █████╗      ██║       ██║    █████╗   ██████╔╝"
  puts " ██║      ██╔══╝      ██║       ██║    ██╔══╝   ██╔══██╗"
  puts " ███████╗ ███████╗    ██║       ██║    ███████╗ ██║  ██║"
  puts " ╚══════╝ ╚══════╝    ╚═╝       ╚═╝    ╚══════╝ ╚═╝  ╚═╝"
  puts ""
  
  print_header "letter セットアップスクリプト"
  print_info "実行時刻: #{Time.now}"

  # 1. 環境ファイルの設定
  print_info "1. 環境ファイルの確認..."
  
  # 実行時のRAILS_ENVを確認
  current_rails_env = ENV['RAILS_ENV'] || 'development'
  is_production = current_rails_env == 'production'
  
  # 環境に応じた設定値を決定
  domain = is_production ? 'your-domain.example.com' : 'localhost'
  protocol = is_production ? 'https' : ''
  queue_in_puma = is_production ? 'false' : 'true'
  
  env_template = <<~ENV
    # ========================================
    # 重要設定
    # ========================================

    # ActivityPub上で使用するドメインを設定します。一度使ったものは再利用できません
    #{is_production ? '# 本番環境では実際のドメインを設定してください' : '# ローカル開発環境の場合は localhost のまま使用できます'}
    ACTIVITYPUB_DOMAIN=#{domain}

    # WebPushを有効化するために必要なVAPID
    #{is_production ? '# 本番環境では必ず rails webpush:generate_vapid_key で生成してください' : '# 開発環境では空欄のまま使用できます（WebPush機能は使用できません）'}
    VAPID_PUBLIC_KEY=
    VAPID_PRIVATE_KEY=

    # ActivityPubではHTTPSでなければ通信できません#{is_production ? '' : '（ローカル開発時は空欄可）'}
    ACTIVITYPUB_PROTOCOL=#{protocol}

    # Rails環境設定
    # development: 開発環境（ローカル開発用）
    # production: 本番環境（実際のサービス運用用）
    RAILS_ENV=#{current_rails_env}

    # ========================================
    # 開発環境設定
    # ========================================

    # Solid QueueワーカーをPuma内で起動するか
    # true: Puma内でワーカー起動（単一プロセス、開発環境向け）
    # false: 独立プロセスでワーカー起動（本格運用向け、production環境推奨）
    SOLID_QUEUE_IN_PUMA=#{queue_in_puma}

    # ========================================
    # オブジェクトストレージ設定（オプション）
    # ========================================

    # 画像などのファイルをS3互換ストレージに保存する場合は true に設定
    S3_ENABLED=false
    # S3_ENDPOINT=
    # S3_BUCKET=
    # R2_ACCESS_KEY_ID=
    # R2_SECRET_ACCESS_KEY=
    # S3_ALIAS_HOST=
  ENV

  if File.exist?(".env")
    print_success ".envファイルが存在します"
    
    # 必須項目のチェック
    env_content = File.read(".env")
    missing_keys = []
    
    %w[ACTIVITYPUB_DOMAIN VAPID_PUBLIC_KEY VAPID_PRIVATE_KEY].each do |key|
      unless env_content.match?(/^#{key}=.+/)
        missing_keys << key
      end
    end
    
    if missing_keys.any?
      print_warning "以下の必須設定が不足しています: #{missing_keys.join(', ')}"
      print_info "サンプル設定を .env.template として作成します"
      File.write(".env.template", env_template)
    else
      print_success "必須の環境変数が設定されています"
    end
  else
    print_warning ".envファイルが見つかりません。デフォルト設定で作成します"
    File.write(".env", env_template)
    print_success ".envファイルを作成しました（#{current_rails_env}環境用のデフォルト設定）"
    print_info "設定内容:"
    print_info "  - ACTIVITYPUB_DOMAIN: #{domain}"
    print_info "  - RAILS_ENV: #{current_rails_env}"
    print_info "  - SOLID_QUEUE_IN_PUMA: #{queue_in_puma}"
    if is_production
      print_info "  - ACTIVITYPUB_PROTOCOL: https"
      puts ""
      print_warning "本番環境の設定です。必ず以下を行ってください:"
      print_warning "  1. ACTIVITYPUB_DOMAINを実際のドメインに変更"
      print_warning "  2. rails webpush:generate_vapid_key でVAPIDキーを生成"
    end
    puts ""
    print_info "必要に応じて後で .env ファイルを編集してください"
    print_info "セットアップを続行します..."
    puts ""
  end

  # 2. 依存関係のインストール
  print_info "2. 依存関係のインストール..."
  system("bundle check") || system!("bundle install")
  print_success "依存関係をインストールしました"

  # 3. データベースの確認と準備
  print_info "3. データベースの確認と準備..."
  
  # 環境変数設定
  rails_env = ENV['RAILS_ENV'] || 'development'
  secret_key = ENV['SECRET_KEY_BASE'] || `bundle exec rails secret`.strip
  env_cmd = "RAILS_ENV=#{rails_env} SECRET_KEY_BASE=\"#{secret_key}\""
  
  # storageディレクトリの確実な作成
  unless Dir.exist?("storage")
    print_info "storageディレクトリを作成中..."
    Dir.mkdir("storage")
    print_success "storageディレクトリを作成しました"
  end
  
  # メインデータベースの確認と作成
  db_file = "storage/#{rails_env}.sqlite3"
  
  # データベースファイルの作成
  unless File.exist?(db_file)
    print_warning "メインデータベースファイルが見つかりません。作成します..."
    begin
      system! "#{env_cmd} bin/rails db:create"
      print_success "メインデータベースを作成しました"
    rescue => e
      print_error "メインデータベース作成に失敗しました: #{e.message}"
      exit 1
    end
  else
    print_success "メインデータベースファイルが存在します (#{rails_env}環境)"
  end
  
  # マイグレーションの状態確認と実行
  print_info "メインデータベースのマイグレーション確認..."
  migration_check = `#{env_cmd} bin/rails db:migrate:status 2>&1`
  
  if migration_check.include?("Schema migrations table does not exist yet") || !$?.success?
    print_info "初回マイグレーションを実行中..."
    begin
      system! "#{env_cmd} bin/rails db:migrate"
      print_success "初回マイグレーションを実行しました"
    rescue => e
      print_error "マイグレーションに失敗しました: #{e.message}"
      exit 1
    end
  else
    # 未実行のマイグレーションがあるかチェック
    pending_migrations = migration_check.lines.select { |line| line.include?("down") }
    if pending_migrations.any?
      print_info "#{pending_migrations.count}個の未実行マイグレーションがあります。実行中..."
      begin
        system! "#{env_cmd} bin/rails db:migrate"
        print_success "マイグレーションを実行しました"
      rescue => e
        print_error "マイグレーションに失敗しました: #{e.message}"
        exit 1
      end
    else
      print_success "すべてのマイグレーションが完了しています"
    end
  end

  # Solid関連データベースの確認と作成
  print_info "Solid関連データベースの確認と作成..."
  
  # データベースファイル確認・作成
  cache_db_file = "storage/cache_#{rails_env}.sqlite3"
  queue_db_file = "storage/queue_#{rails_env}.sqlite3"
  cable_db_file = "storage/cable_#{rails_env}.sqlite3"

  # データベースファイル作成
  [
    ["Cache", cache_db_file, "cache"],
    ["Queue", queue_db_file, "queue"], 
    ["Cable", cable_db_file, "cable"]
  ].each do |name, db_file, db_type|
    unless File.exist?(db_file)
      print_warning "#{name}データベースファイルが見つかりません。作成します..."
      # マルチデータベース用の作成コマンドを試行
      if system("#{env_cmd} bin/rails db:create:#{db_type} 2>/dev/null")
        print_success "#{name}データベースを作成しました"
      else
        # 手動でSQLiteファイル作成
        begin
          require 'sqlite3'
          SQLite3::Database.new(db_file).close
          print_success "#{name}データベースを作成しました（手動）"
        rescue => e
          print_warning "#{name}データベース作成をスキップしました: #{e.message}"
        end
      end
    else
      print_success "#{name}データベースファイルが存在します"
    end
  end

  # Solid関連の設定ファイルとスキーマを一括インストール（設定ファイルが存在しない場合のみ）
  print_info "Solid関連コンポーネントのインストール..."
  
  # 設定ファイルが存在しない場合のみインストールを実行
  unless File.exist?("config/cache.yml")
    print_info "cache.ymlが存在しないため、Solid Cacheをインストールします..."
    system("#{env_cmd} bin/rails solid_cache:install 2>/dev/null")
    
    # Rails 8対応のためにcache.ymlとcache_schema.rbを修正
    print_info "Rails 8対応のためにSolid Cache設定を修正中..."
    
    # cache.ymlの修正
    cache_yml_content = File.read("config/cache.yml")
    cache_yml_content.gsub!(/development:\s*\n\s*<<: \*default/, "development:\n  database: cache\n  <<: *default")
    cache_yml_content.gsub!(/test:\s*\n\s*<<: \*default/, "test:\n  database: cache\n  <<: *default")
    File.write("config/cache.yml", cache_yml_content)
    
    print_success "Solid Cache設定をRails 8対応に修正しました"
  else
    print_success "cache.ymlが既に存在します"
  end
  
  unless File.exist?("config/queue.yml")
    print_info "queue.ymlが存在しないため、Solid Queueをインストールします..." 
    system("#{env_cmd} bin/rails solid_queue:install 2>/dev/null")
  else
    print_success "queue.ymlが既に存在します"
  end
  
  unless File.exist?("config/cable.yml")
    print_info "cable.ymlが存在しないため、Solid Cableをインストールします..."
    system("#{env_cmd} bin/rails solid_cable:install 2>/dev/null")
    
    # development/test環境でもsolid_cableを使用するように修正
    print_info "Rails 8対応のためにSolid Cable設定を修正中..."
    
    cable_yml_content = File.read("config/cable.yml")
    cable_yml_content.gsub!(/development:\s*\n\s*adapter: async/, 
      "development:\n  adapter: solid_cable\n  connects_to:\n    database:\n      writing: cable\n  polling_interval: 0.1.seconds\n  message_retention: 1.day")
    cable_yml_content.gsub!(/test:\s*\n\s*adapter: test/, 
      "test:\n  adapter: solid_cable\n  connects_to:\n    database:\n      writing: cable\n  polling_interval: 0.1.seconds\n  message_retention: 1.day")
    File.write("config/cable.yml", cable_yml_content)
    
    print_success "Solid Cable設定をRails 8対応に修正しました"
  else
    print_success "cable.ymlが既に存在します"
  end

  # Solid関連データベースのマイグレーション実行
  print_info "Solid関連データベースのマイグレーション..."
  
  # Cache database schema
  if File.exist?(cache_db_file)
    cache_tables = `sqlite3 "#{cache_db_file}" ".tables" 2>/dev/null`.strip
    unless cache_tables.include?("solid_cache_entries")
      print_info "Solid Cacheテーブルを作成中..."
      # Rails 8対応のSolid Cacheテーブルを直接作成（schema.rbを使わずに）
      result = system("sqlite3 \"#{cache_db_file}\" \"
        CREATE TABLE solid_cache_entries (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          key BLOB NOT NULL,
          value BLOB NOT NULL,
          created_at DATETIME NOT NULL,
          key_hash VARCHAR(40) NOT NULL,
          byte_size INTEGER NOT NULL
        );
        CREATE UNIQUE INDEX index_solid_cache_entries_on_key_hash ON solid_cache_entries (key_hash);
        CREATE INDEX index_solid_cache_entries_on_byte_size ON solid_cache_entries (byte_size);
        CREATE INDEX index_solid_cache_entries_on_key_hash_and_byte_size ON solid_cache_entries (key_hash, byte_size);
      \"")
      if result
        print_success "Solid Cacheテーブルを作成しました（Rails 8対応）"
      else
        print_error "Solid Cacheテーブル作成に失敗しました"
      end
    else
      print_success "Solid Cacheテーブルが存在します"
    end
  end

  # Queue database schema
  if File.exist?(queue_db_file)
    queue_tables = `sqlite3 "#{queue_db_file}" ".tables" 2>/dev/null`.strip
    unless queue_tables.include?("solid_queue_jobs")
      print_info "Solid Queueテーブルを作成中..."
      if File.exist?("db/queue_schema.rb")
        # スキーマファイルを正しい方法で実行
        result = system("#{env_cmd} bin/rails runner \"
          begin
            original_connection = ActiveRecord::Base.connection_db_config.name
            ActiveRecord::Base.establish_connection(:queue)
            
            # スキーマファイルの内容を読み込んで実行
            schema_content = File.read(Rails.root.join('db/queue_schema.rb'))
            eval(schema_content)
            
            puts 'SUCCESS: Solid Queue schema loaded'
          rescue => e
            puts 'ERROR: ' + e.message
            exit 1
          ensure
            ActiveRecord::Base.establish_connection(original_connection.to_sym) if original_connection
          end
        \"")
        if result
          print_success "Solid Queueスキーマを読み込みました"
        else
          print_error "Solid Queueスキーマ読み込みに失敗しました"
        end
      else
        print_warning "Solid Queueスキーマファイルが見つかりません"
      end
    else
      print_success "Solid Queueテーブルが存在します"
    end
  end

  # Cable database schema
  if File.exist?(cable_db_file)
    cable_tables = `sqlite3 "#{cable_db_file}" ".tables" 2>/dev/null`.strip
    unless cable_tables.include?("solid_cable_messages")
      print_info "Solid Cableテーブルを作成中..."
      if File.exist?("db/cable_schema.rb")
        # スキーマファイルを正しい方法で実行
        result = system("#{env_cmd} bin/rails runner \"
          begin
            original_connection = ActiveRecord::Base.connection_db_config.name
            ActiveRecord::Base.establish_connection(:cable)
            
            # スキーマファイルの内容を読み込んで実行
            schema_content = File.read(Rails.root.join('db/cable_schema.rb'))
            eval(schema_content)
            
            puts 'SUCCESS: Solid Cable schema loaded'
          rescue => e
            puts 'ERROR: ' + e.message
            exit 1
          ensure
            ActiveRecord::Base.establish_connection(original_connection.to_sym) if original_connection
          end
        \"")
        if result
          print_success "Solid Cableスキーマを読み込みました"
        else
          print_error "Solid Cableスキーマ読み込みに失敗しました"
        end
      elsif File.exist?("db/cable_structure.sql")
        # 構造ファイルから作成
        if system("sqlite3 \"#{cable_db_file}\" < db/cable_structure.sql 2>/dev/null")
          print_success "Solid Cable構造を読み込みました"
        else
          print_error "Solid Cable構造読み込みに失敗しました"
        end
      else
        # 手動でテーブル作成
        result = system("#{env_cmd} bin/rails runner \"
          begin
            ActiveRecord::Base.establish_connection(:cable)
            ActiveRecord::Base.connection.execute('CREATE TABLE IF NOT EXISTS solid_cable_messages (id INTEGER PRIMARY KEY AUTOINCREMENT, channel VARCHAR NOT NULL, payload TEXT NOT NULL, created_at DATETIME NOT NULL)')
            ActiveRecord::Base.connection.execute('CREATE INDEX IF NOT EXISTS index_solid_cable_messages_on_channel ON solid_cable_messages (channel)')
            ActiveRecord::Base.connection.execute('CREATE INDEX IF NOT EXISTS index_solid_cable_messages_on_created_at ON solid_cable_messages (created_at)')
            puts 'SUCCESS: Solid Cable tables created manually'
          rescue => e
            puts 'ERROR: ' + e.message
            exit 1
          end
        \"")
        if result
          print_success "Solid Cableテーブルを手動作成しました"
        else
          print_error "Solid Cableテーブル作成に失敗しました"
        end
      end
    else
      print_success "Solid Cableテーブルが存在します"
    end
  end

  # 最終確認
  print_info "Solid関連テーブルの最終確認..."
  cache_ok = `sqlite3 "#{cache_db_file}" ".tables" 2>/dev/null`.include?("solid_cache_entries")
  queue_ok = `sqlite3 "#{queue_db_file}" ".tables" 2>/dev/null`.include?("solid_queue_jobs")
  cable_ok = `sqlite3 "#{cable_db_file}" ".tables" 2>/dev/null`.include?("solid_cable_messages")
  
  if cache_ok && queue_ok && cable_ok
    print_success "すべてのSolid関連データベースが正常にセットアップされました"
  else
    print_warning "一部のSolid関連データベースに問題があります (Cache:#{cache_ok} Queue:#{queue_ok} Cable:#{cable_ok})"
  end

  # production環境の場合はSECRET_KEY_BASEをチェック
  if rails_env == 'production' && ENV['SECRET_KEY_BASE'].nil?
    print_info "production環境用のSECRET_KEY_BASEを生成中..."
    secret_key = `bundle exec rails secret`.strip
    ENV['SECRET_KEY_BASE'] = secret_key
    print_success "SECRET_KEY_BASEを生成しました"
  end


  # 4. ログとテンポラリファイルのクリーンアップ
  print_info "4. ログとテンポラリファイルのクリーンアップ..."
  system! "bin/rails log:clear tmp:clear"
  print_success "クリーンアップが完了しました"

  # 5. 既存プロセスの確認と停止
  print_info "5. 既存プロセスの確認..."
  rails_running = system("pgrep -f 'rails server' > /dev/null 2>&1")
  
  # SOLID_QUEUE_IN_PUMAを考慮したプロセス確認
  if ENV['SOLID_QUEUE_IN_PUMA'] == 'true'
    queue_running = false  # Puma内で動作するため独立プロセスなし
  else
    queue_running = system("pgrep -f 'solid.*queue' > /dev/null 2>&1")
  end

  if rails_running || queue_running
    print_warning "既存のプロセスが動作中です。停止します..."
    unless ENV['SOLID_QUEUE_IN_PUMA'] == 'true'
      system("pkill -f 'solid.*queue' 2>/dev/null || true")
    end
    system("pkill -f 'rails server' 2>/dev/null || true")
    system("pkill -f 'puma.*pit1' 2>/dev/null || true")
    sleep 3
    print_success "既存プロセスを停止しました"
  end

  # PIDファイルのクリーンアップ
  print_info "PIDファイルのクリーンアップ..."
  FileUtils.rm_f("tmp/pids/server.pid")
  unless ENV['SOLID_QUEUE_IN_PUMA'] == 'true'
    Dir.glob("tmp/pids/solid_queue*.pid").each { |f| FileUtils.rm_f(f) }
  end

  unless ARGV.include?("--skip-server")
    # 6. 環境変数の読み込み
    print_info "6. 環境変数の読み込み..."
    if File.exist?("bin/load_env.sh")
      env_vars = {}
      File.readlines(".env").each do |line|
        line = line.strip
        next if line.empty? || line.start_with?("#")
        key, value = line.split("=", 2)
        env_vars[key] = value if key && value
      end
      
      required_vars = %w[ACTIVITYPUB_DOMAIN]
      missing_vars = required_vars.select { |var| env_vars[var].nil? || env_vars[var].empty? }
      
      if missing_vars.any?
        print_error "必須環境変数が設定されていません: #{missing_vars.join(', ')}"
        exit 1
      end
      
      print_success "環境変数を読み込みました"
      print_info "ACTIVITYPUB_DOMAIN: #{env_vars['ACTIVITYPUB_DOMAIN']}"
      print_info "ACTIVITYPUB_PROTOCOL: #{env_vars['ACTIVITYPUB_PROTOCOL'] || 'http (default)'}"
    end

    # 7. サーバの起動
    print_info "7. サーバの起動..."
    
    # Railsサーバを起動（デーモンモード）
    print_info "Railsサーバを起動中..."
    system!("RAILS_ENV=#{rails_env} rails server -b 0.0.0.0 -p 3000 -d")
    print_success "Railsサーバを起動しました"

    # Solid Queue起動（SOLID_QUEUE_IN_PUMAを考慮）
    if ENV['SOLID_QUEUE_IN_PUMA'] == 'true'
      print_success "Solid Queue（Puma内）が設定されています"
    else
      print_info "Solid Queueワーカーを起動中..."
      system("RAILS_ENV=#{rails_env} nohup bin/jobs > log/solid_queue.log 2>&1 &")
      print_success "Solid Queueワーカーを起動しました"
    end

    # 8. 起動確認
    print_info "8. 起動確認中..."
    sleep 5

    # サーバの応答確認
    server_ok = system("curl -s http://localhost:3000 > /dev/null 2>&1")
    if server_ok
      print_success "Railsサーバが応答しています"
    else
      print_warning "Railsサーバの応答確認に失敗しました"
    end

    # プロセス数の確認
    rails_procs = `ps aux | grep -c '[r]ails server'`.to_i
    print_info "Railsプロセス数: #{rails_procs}"

    # Solid Queue確認（SOLID_QUEUE_IN_PUMAを考慮）
    if ENV['SOLID_QUEUE_IN_PUMA'] == 'true'
      # Puma内でSolid Queueが動作している場合の確認
      print_info "Solid Queue（Puma内）の動作確認中..."
      begin
        queue_check = `timeout 5 bin/rails runner "
          adapter = ActiveJob::Base.queue_adapter
          if adapter.is_a?(ActiveJob::QueueAdapters::SolidQueueAdapter)
            puts 'ok'
          else
            puts 'not_configured'
          end
        " 2>/dev/null`.strip
        
        if queue_check == 'ok'
          print_success "Solid Queue（Puma内）が正常に設定されています"
        else
          print_warning "Solid Queue（Puma内）の設定に問題があります"
        end
      rescue
        print_warning "Solid Queue確認がタイムアウトしました"
      end
    else
      # 独立プロセスとしてのSolid Queue確認
      queue_procs = `ps aux | grep -c '[s]olid.*queue'`.to_i
      print_info "Solid Queueプロセス数: #{queue_procs}"
      
      if queue_procs > 0
        print_success "Solid Queueワーカーが動作中です"
        begin
          pending_jobs = `timeout 5 bin/rails runner "puts SolidQueue::Job.where(finished_at: nil).count" 2>/dev/null`.strip.to_i
          print_info "待機中ジョブ数: #{pending_jobs}"
        rescue
          print_warning "ジョブ状況確認がタイムアウトしました"
        end
      else
        print_error "Solid Queueワーカーが起動していません。手動で再起動してください:"
        print_info "  bin/jobs &"
      end
    end

    # Solid Cacheの動作確認
    print_info "Solid Cacheの動作確認中..."
    begin
      cache_check = `timeout 5 bin/rails runner "
        adapter = Rails.cache.class.name
        puts 'adapter:' + adapter
        
        if adapter.include?('SolidCache')
          # 接続確認のみ（read/writeテストはskip）
          begin
            ActiveRecord::Base.establish_connection(:cache)
            if ActiveRecord::Base.connection.table_exists?('solid_cache_entries')
              puts 'status:table_exists'
            else
              puts 'status:no_table'
            end
            ActiveRecord::Base.establish_connection(:primary)
          rescue => e
            puts 'status:error:' + e.message
          end
        else
          puts 'status:unused'
        end
      " 2>/dev/null`.strip

      cache_lines = cache_check.split("\n")
      adapter = cache_lines.find { |l| l.start_with?("adapter:") }&.sub("adapter:", "")
      status = cache_lines.find { |l| l.start_with?("status:") }&.sub("status:", "")
      
      case status
      when "table_exists"
        print_success "Solid Cache テーブルが存在します（設定完了）"
      when "no_table"
        print_warning "Solid Cache テーブルが見つかりません"
      when /^error:/
        error_msg = status.sub("error:", "")
        print_warning "Solid Cache 接続エラー: #{error_msg}"
      when "unused"
        print_info "Solid Cache は未使用 (adapter: #{adapter})"
      else
        print_warning "Solid Cache 確認結果が不明です"
      end
    rescue
      print_warning "Solid Cache確認がタイムアウトしました"
    end

    # Solid Cableの動作確認
    print_info "Solid Cableの動作確認中..."
    begin
      cable_check = `timeout 5 bin/rails runner "
        adapter = ActionCable.server.config.cable&.[](:adapter) || 'unknown'
        puts 'adapter:' + adapter.to_s
        
        if adapter.to_s == 'solid_cable'
          begin
            ActiveRecord::Base.establish_connection(:cable)
            if ActiveRecord::Base.connection.table_exists?('solid_cable_messages')
              message_count = ActiveRecord::Base.connection.execute('SELECT COUNT(*) FROM solid_cable_messages').first[0]
              puts 'messages:' + message_count.to_s
              puts 'status:ok'
            else
              puts 'status:no_table'
            end
          rescue => e
            puts 'status:error:' + e.message
          ensure
            ActiveRecord::Base.establish_connection(:primary)
          end
        else
          puts 'status:unused'
        end
      " 2>/dev/null`.strip

      cable_lines = cable_check.split("\n")
      adapter = cable_lines.find { |l| l.start_with?("adapter:") }&.sub("adapter:", "")
      status = cable_lines.find { |l| l.start_with?("status:") }&.sub("status:", "")
      
      case status
      when "ok"
        message_count = cable_lines.find { |l| l.start_with?("messages:") }&.sub("messages:", "")
        if message_count && message_count.to_i > 0
          print_success "Solid Cable が正常動作中 (messages: #{message_count})"
        else
          print_success "Solid Cable が正常動作中"
        end
      when "no_table"
        print_warning "Solid Cable テーブルが見つかりません"
      when /^error:/
        error_msg = status.sub("error:", "")
        print_warning "Solid Cable 接続エラー: #{error_msg}"
      when "unused"
        print_info "Solid Cable は未使用 (adapter: #{adapter})"
      else
        print_warning "Solid Cable 確認結果が不明です"
      end
    rescue
      print_warning "Solid Cable確認がタイムアウトしました"
    end

    # 最終結果表示
    puts ""
    print_header "セットアップ完了"
    print_success "letter が正常に起動しました"
    
    domain = env_vars&.dig('ACTIVITYPUB_DOMAIN') || 'localhost'
    protocol = env_vars&.dig('ACTIVITYPUB_PROTOCOL') || 'http'
    
    print_info "アクセス情報:"
    puts "  ローカルURL: http://localhost:3000"
    puts "  公開URL: #{protocol}://#{domain}" if domain != 'localhost'
    puts ""
    print_info "監視コマンド:"
    puts "  tail -f log/#{rails_env}.log"
    puts "  tail -f log/solid_queue.log"
    puts "  ps aux | grep -E 'rails|solid'"
    puts ""
    print_info "停止コマンド:"
    puts "  pkill -f 'rails server|solid.*queue'"
    puts ""
    print_info "統合管理ツール:"
    puts "  bin/letter_manager.rb - アカウントの作成や削除、システムの再起動"
  else
    print_success "サーバの起動をスキップしました (--skip-server)"
  end
end
